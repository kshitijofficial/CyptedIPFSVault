const axios = require("axios");
const UserModel = require("../models/User");
const { decryptData } = require("../utils/decryption");

async function returnResponse(ipfsHash) {
    const res = await axios.get(`https://gateway.pinata.cloud/ipfs/${ipfsHash}`);
    console.log(res.data)
    return res.data;
}
async function getAllImages(req, res) {
    try {
        // const userId = req.accountAddress;
        const userId = "0x13cB03e0d0b3D8A8ADC729A7779f53Fe93C94285"
        const user = await UserModel.findOne({ userId: userId.toLowerCase() });
        if (user) {
            const { page, limit } = req.query; // Extract page number and limit from query parameters
            const pageNumber = parseInt(page) || 1; // Convert page to number, default to 1
            const limitNumber = parseInt(limit) || 1; // Convert limit to number, default to 10
            const ipfsHashesArray = req.body.slice((pageNumber - 1) * limitNumber, pageNumber * limitNumber); // Slice the array based on pagination
    
            const encryptedDataArr = await Promise.all(ipfsHashesArray.map(async (ipfsHash) => {
                const response = await returnResponse(ipfsHash);
                return response;
            }));
            const decryptedImages = [];
            for (const pair of encryptedDataArr) {
                const decryptedData = decryptData(pair.encryptedData, pair.iv, user.encryptionKey);
                //decryptedImages.push(decryptedData.toString('base64'));
            }

            // res.status(200).json(decryptedImages); // Return array of image data
        }
    } catch (error) {
        console.error('Error decrypting data from the database:', error);
        res.status(500).send('Error decrypting data from the database');
    }
}

module.exports = {
    getAllImages
};


// // controllers/imageController.js

// const axios = require("axios");
// const UserModel = require("../models/User");
// const { decryptData } = require("../utils/decryption");

// async function getAllImages(req, res) {
//     try {
//         const userId = req.accountAddress;
//         const user = await UserModel.findOne({ userId: userId });
//         if (user) {
//         const ipfsHashesArray = req.body;
//         const encryptedDataArr = await Promise.all(ipfsHashesArray.map(async (ipfsHash) => {
//             const response = await returnResponse(ipfsHash);
//             return response;
//         }));

//         const decryptedImages = [];

//         // Iterate over each pair of encryptedData and iv, decrypt them, and store in decryptedImages
//         for (const pair of encryptedDataArr) {
//             const decryptedData = decryptData(pair.encryptedData, pair.iv, user.encryptionKey);
//             decryptedImages.push(decryptedData.toString('base64'));
//         }
//         res.status(200).json(decryptedImages); // Return array of image data
//     }
//     } catch (error) {
//         console.error('Error decrypting data from the database:', error);
//         res.status(500).send('Error decrypting data from the database');
//     }
// }

// async function returnResponse(ipfsHash) {
//     const res = await axios.get(`https://gateway.pinata.cloud/ipfs/${ipfsHash}`);
//     console.log(res.data)
//     return res.data;
// }

// module.exports = {
//     getAllImages
// };
